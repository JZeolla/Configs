# =========================
# Author:          Jon Zeolla (JZeolla)
# Last update:     2015-09-16
# File Type:       Configuration
# Version:         1.1
# Repository:      https://github.com/JonZeolla
# Description:     This is a rsyslog configuration file grouping and sending rsyslog as a client
#
# Notes
# - Anything that has a placeholder value is tagged with TODO.
# - sync="off" disables running a sync operation after writing each line in order to increase I/O (http://www.rsyslog.com/doc/v8-stable/configuration/actions.html#regular-file).  It is possible that you would lose information if the system crashes right after a write attempt.  Legacy systems use a - to disable syncing after writing each line.  
# - rsyslog source is available on GitHub (External link - https://github.com/rsyslog/rsyslog).
# - rsyslog documentation is available on the rsyslog website (External link - http://www.rsyslog.com/doc/master/).
#
# =========================

# Set all of your filters
set $!filter!auth="($syslogfacility-text == [auth,authpriv])";
set $!filter!localwrite="($syslogfacility-text == local1)";
set $!filter!nolocalwrite="($syslogfacility-text == local0 and not $!filter!localwrite)";
set $!filter!syslog="(not ($!filter!auth and $!filter!nolocalwrite))";
set $!filter!cron="($syslogfacility-text == cron and not $!filter!nolocalwrite)";
set $!filter!daemon="($syslogfacility-text == daemon and not $!filter!nolocalwrite)";
set $!filter!kern="($syslogfacility-text == kern and not $!filter!nolocalwrite)";
set $!filter!lpr="($syslogfacility-text == lpr and not $!filter!nolocalwrite)";
set $!filter!mail="($syslogfacility-text == mail and not $!filter!nolocalwrite)";
set $!filter!news="($syslogfacility-text == mail and not $!filter!nolocalwrite)";
set $!filter!user="($syslogfacility-text == user and not $!filter!nolocalwrite)";
set $!filter!uucp="($syslogfacility-text == uucp and not $!filter!nolocalwrite)";
set $!filter!at_least_info="($syslogseverity < 7)";
set $!filter!at_least_notice="($syslogseverity < 6)";
set $!filter!at_least_warn="($syslogseverity < 5)";
set $!filter!at_least_err="($syslogseverity < 4)";
set $!filter!at_least_crit="($syslogseverity < 3)";
set $!filter!debug="($syslogseverity-text == debug and not ($syslogfacility-text == [auth,authpriv,news,mail] and $!filter!nolocalwrite))";
set $!filter!messages="(($syslogseverity-text == [info,notice,warn] or $!filter!localwrite) and not $syslogfacility-text == [auth,authpriv,cron,daemon,mail,news] or $!filter!nolocalwrite)";
set $!filter!emerg="($syslogseverity-text == emerg and not $!filter!nolocalwrite)";
set $!filter!xconsole="($syslogfacility-text == [daemon,mail] or $syslogseverity-text == [debug,info,notice,warn] or ($syslogfacility-text == news and $syslogseverity-text == [crit,err,notice])";

# Set all of the unique permission sets
set $!permissions!default='dirCreateMode="0755" dirOwner="root" dirGroup="root" fileOwner="root" fileGroup="adm" fileCreateMode="0640"'
set $!permissions!news='dirCreateMode="0755" dirOwner="news" dirGroup="adm" fileOwner="news" fileGroup="adm" fileCreateMode="0640"'

# Log all syslog remotely over TCP
@@server.example.com:514
#TODO Log all syslog remotely over TCP w/TLS
#@@log-iso.andrew.cmu.edu:1514

# Log to the appropriate local file
if $!filter!nolocalwrite then {
        stop
}
if $!filter!localwrite then {
        action(type="omfile" File="/var/log/messages" sync="off"
               $!permissions!default)
}
if $!filter!auth then {
        action(type="omfile" File="/var/log/auth.log" sync="off"
               $!permissions!default)
}
if $!filter!syslog then {
        action(type="omfile" File="/var/log/syslog" sync="on"
               $!permissions!default)
}
if $!filter!cron then {
        action(type="omfile" File="/var/log/cron.log" sync="off"
               $!permissions!default)
}
if $!filter!daemon then {
        action(type="omfile" File="/var/log/daemon.log" sync="on"
               $!permissions!default)
}
if $!filter!kern then {
        action(type="omfile" File="/var/log/kern.log" sync="on"
               $!permissions!default)
}
if $!filter!lpr then {
        action(type="omfile" File="/var/log/lpr.log" sync="on"
               $!permissions!default)
}
if $!filter!mail then {
        action(type="omfile" File="/var/log/mail.log" sync="on"
               $!permissions!default)
}
if $!filter!user then {
        action(type="omfile" File="/var/log/user.log" sync="off"
               $!permissions!default)
}
if $!filter!uucp then {
        action(type="omfile" File="/var/log/uucp.log" sync="off"
               $!permissions!default)
}
if $!filter!mail and $!filter!at_least_info then {
        action(type="omfile" File="/var/log/$syslogfacility-text.info" sync="on"
               $!permissions!default)
}
if $!filter!mail and $!filter!at_least_warn then {
        action(type="omfile" File="/var/log/$syslogfacility-text.warn" sync="on"
               $!permissions!default)
}
if $!filter!mail and $!filter!at_least_crit then {
        action(type="omfile" File="/var/log/$syslogfacility-text.crit" sync="on"
               $!permissions!default)
}
if $!filter!news and $!filter!at_least_crit then {
        action(type="omfile" File="/var/log/news/news.crit" sync="off"
               $!permissions!news)
}
if $!filter!news and $!filter!at_least_err then {
        action(type="omfile" File="/var/log/news/news.err" sync="off"
               $!permissions!news)
}
if $!filter!news and $!filter!at_least_notice then {
        action(type="omfile" File="/var/log/news/news.notice" sync="off"
               $!permissions!news)
}
if $!filter!debug then {
        action(type="omfile" File="/var/log/debug" sync="on"
               $!permissions!default)
}
if $!filter!messages then {
        action(type="omfile" File="/var/log/messages" sync="off"
               $!permissions!default)
}
if $!filter!emerg then {
        action(type="omfile" File="/dev/console" sync="off")
}
if $!filter!xconsole then {
        # Replacing xconsole with console because we don't use x
        action(type="omfile" File="/dev/console" sync="off")
}
