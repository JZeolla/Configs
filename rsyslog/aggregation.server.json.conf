# =========================  
# Author:          Jon Zeolla (JZeolla)  
# Last update:     2016-04-30  
# File Type:       Configuration  
# Version:         1.0  
# Repository:      https://github.com/JonZeolla  
# Description:     This is a rsyslog configuration file for receiving 'normal' syslog at the syslog aggregation tier and forwarding it as JSON to an analysis server.  
#  
# Notes  
# - Anything that has a placeholder value is tagged with TODO.  
# - This config file mixes rsyslog "legacy format" (pre-6.3.3) with the new format due to a lack of documentation as of 2015-02-01 (External link - http://blog.gerhards.net/2011/07/rsyslog-633-config-format-improvements.html).  
# - The rsyslog source is available on GitHub (External link - https://github.com/rsyslog/rsyslog).  
# - The rsyslog documentation is available on the rsyslog website (External link - http://www.rsyslog.com/doc/master/).  
#  
# =========================  

## General Settings

# Preserve the FQDNs as possible
global(preserveFQDN="on")


## Default log templates

# Set a format for forwarding to a non-JSON enabled server
# %msg:::sp-if-no-1st-sp% doesn't appear to always work (it frequently makes JSON parsing on the analysis layer fail), so instead I just force a space (details - http://www.rsyslog.com/doc/v8-stable/configuration/property_replacer.html)
template(name="plainFormat" type="string" string="<%PRI%>%TIMESTAMP:::date-rfc3339% %FROMHOST-IP% %syslogtag% %msg%")

# Set a format for forwarding to a JSON enabled server.  
# TODO:  Needs double checked
#
# Custom key value pairs:
#
# Key:  class
# Values:  default, <TODO - user defined classes>
# Notes:  User configurable - useful in compliance environments to do something like add a compliance-specific tag for relevant sources (PCI, FISMA, NERC, HIPAA, etc.)
#
# Key:  integrity
# Values:  stateful (tcp), stateless (udp)
# Notes:  Meant to be stored with the syslog's final destination in order to specify the transport integrity (what's the possibility this was spoofed/tampered with?)
#
# Key:  confidentiality
# Values:  encrypted (tls), unencrypted (plaintext)
# Notes:  Meant to be stored with the syslog's final destination in order to specify the transport confidentiality (what's the possibility this was spoofed/tampered with, and could anybody else see it?)
#
template(name="jsonDefaultStatelessUnencrypted" type="string" string="<%PRI%>%TIMESTAMP:::date-rfc3339% %FROMHOST-IP% %syslogtag% @cee: {%msg:::jsonf:message%,%syslogtag:::jsonf%,%HOSTNAME:::jsonf:hostname%,%fromhost:::jsonf%,%fromhost-ip:::jsonf%,%syslogfacility-text:::jsonf:facility%,%syslogpriority-text:::jsonf:priority%,%timereported:::date-rfc3339,jsonf%,%timegenerated:::date-rfc3339,jsonf%,\"class\":\"default\",\"integrity\":\"stateless\",\"confidentiality\":\"unencrypted\"}")
template(name="jsonDefaultStatefulEncrypted" type="string" string="<%PRI%>%TIMESTAMP:::date-rfc3339% %FROMHOST-IP% %syslogtag% @cee: {%msg:::jsonf:message%,%syslogtag:::jsonf%,%HOSTNAME:::jsonf:hostname%,%fromhost:::jsonf%,%fromhost-ip:::jsonf%,%syslogfacility-text:::jsonf:facility%,%syslogpriority-text:::jsonf:priority%,%timereported:::date-rfc3339,jsonf%,%timegenerated:::date-rfc3339,jsonf%,\"class\":\"default\",\"integrity\":\"stateful\",\"confidentiality\":\"encrypted\"}")


## Forwarding
module(load="omrelp")

ruleset(name="DefaultStatelessUnencrypted") {
  # Send to the analysis server over RELP using TCP & TLS
  action(type="omrelp" target="TODO.example.com" port="1514" tls="on" template="jsonDefaultStatelessUnencrypted" action.resumeRetryCount="-1" queue.filename="jsonDefaultStatelessUnencrypted" queue.type="LinkedList" queue.saveonshutdown="on" queue.size="200000" tls.caCert="/etc/TODO/TODO.pem" tls.myCert="/etc/TODO/TODO.pem" tls.myPrivKey="/etc/TODO/TODO.pem" tls.authmode="name" tls.permittedpeer=["TODO"] )
}

ruleset(name="DefaultStatefulEncrypted") {
  # Send to the analysis server over RELP using TCP & TLS
  action(type="omrelp" target="TODO.example.com" port="1514" tls="on" template="jsonDefaultStatefulEncrypted" action.resumeRetryCount="-1" queue.filename="jsonDefaultStatefulEncrypted" queue.type="LinkedList" queue.saveonshutdown="on" queue.size="200000" tls.caCert="/etc/TODO/TODO.pem" tls.myCert="/etc/TODO/TODO.pem" tls.myPrivKey="/etc/TODO/TODO.pem" tls.authmode="name" tls.permittedpeer=["TODO"] )
}

## Ingestion
# To easily differentiate you can listen on multiple different ports, send each port to a different ruleset, and only use the ports on the back end of a load balancer (differentiate by VIP on the clients).

# UDP
module(load="imudp")                                                                           # Load the UDP input module
input(type="imudp" port="514" ruleset="DefaultStatelessUnencrypted")                           # Listen on UDP 514 and send traffic to the DefaultStatelessUnencrypted ruleset

# TCP over TLS
$DefaultNetstreamDriver gtls                                                                   # Set up TLS
$DefaultNetstreamDriverCAFile /etc/TODO/TODO.crt                                               # TODO:  Specify your cert bundle/chain
$DefaultNetstreamDriverCertFile /etc/TODO/TODO.crt                                             # TODO:  Specify your cert
$DefaultNetstreamDriverKeyFile /etc/TODO/TODO.key                                              # TODO:  Specify your key
module(load="imtcp" MaxSessions="2000" StreamDriver.mode="1" StreamDriver.authmode="anon")     # Load imtcp with TLS-protected operation with anonymous authentication as described in IETF's draft-ietf-syslog-transport-tls-12 Internet draft
input(type="imtcp" port="1514" ruleset="DefaultStatefulEncrypted")                             # Set imtcp to listen on 1514 and send traffic to the DefaultStatefulEncrypted ruleset.  
