# =========================
# Author:          Jon Zeolla (JZeolla)
# Last update:     2016-07-19
# File Type:       Configuration
# Version:         1.3
# Repository:      https://github.com/JonZeolla
# Description:     This is a rsyslog configuration file for parsing JSON-formatted messages and storing them in local flat files.
#
# Notes
# - This should be accompanied by a rsyslog.conf config file which sets more general settings for rsyslog.
# - Anything that has a placeholder value is tagged with TODO.  
# - This config file mixes rsyslog "legacy format" (pre-6.3.3) with the new format due to a lack of documentation as of 2015-02-01 (External link - http://blog.gerhards.net/2011/07/rsyslog-633-config-format-improvements.html).
# - rsyslog source is available on GitHub (External link - https://github.com/rsyslog/rsyslog).
# - rsyslog documentation is available on the rsyslog website (External link - http://www.rsyslog.com/doc/master/).
#
# =========================

## General settings
global(preserveFQDN="on")                                                       # Preserve the FQDNs as possible

## Load some helpful modules
module(load="imrelp")

## Default log templates
# TODO:  This should probably log to a database, not flat files.  This has the added benefit of being able to store characteristics like the the status (nonsensitive, sensitive, pci, hipaa, etc.), integrity level (udp, tcp, relp), and confidentiality (encrypted, unencrypted) more easily.  There are plenty of available output modules to do this easily.
# Templates for syslog that successfully parses as JSON.
template(name="json_default" type="string" string="/data/syslog/%$!fromhost-ip%/%$year%/%$month%/%$!fromhost-ip%-%$year%-%$month%-%$day%.log")
# Templates for syslog that doesn't successfully parse as JSON.
template(name="notvalidjson_default" type="string" string="/data/syslog/%hostname%/%$year%/%$month%/%hostname%-%$year%-%$month%-%$day%.log")
template(name="notvalidjson_local" type="string" string="/data/syslog/%fromhost-ip%/%$year%/%$month%/%fromhost-ip%-%$year%-%$month%-%$day%.log")
# Email Alerts
template(name="MailSubject" type="string" string="Rsyslog Alert - %$.mail!title%")
template(name="MailBody" type="string" string="Incident:\t\t%$.mail!title%\r\nMonitored String:\t%$.mail!stringmatch%\r\nContext:\t\t%$.mail!context%\r\n\r\nTime:\t\t\t%$!timereported%\r\nReporting System:\t%!fromhost%\r\nReporting System IP:\t%$!fromhost-ip%\r\nSyslog Tag:\t\t%!syslogtag%\r\nSyslog Message:\t%$!message%\r\n\r\nOriginal String:\t\t%$!timereported% %$!fromhost-ip% %!syslogtag%%$!message%")

# Parse the JSON-formatted syslog and format it as RFC3164 syslog.  
template(name="logprobe_json" type="string" string="<%$!pri%>%$!timereported% %$!fromhost-ip% %$!syslogtag%%$!message%\n")
# TODO:  Service-specific log template.  This is a template for refined log files.  Ideas are logs of all successful authentications, failed authentications, or specific keywords or terms.  This can be handled better by storing in a database (new column/key value pair).
#template(name="servicename" type="string" string="/data/syslog/services/servicename-%$year%-%$month%-%$day%.log")
# TODO:  Log template for duplicated PTR resolutions.  This is a template to use to handle multiple IPs that reverse lookup to the same hostname, which is an issue because this config file uses the source IP for the folder structure, but there is a cron job to do reverse lookups and create sym links).  This can be handled better by storing in a database, because you could allow both source IP and host lookup fields in the same entry.
#template(name="example" type="string" string="/data/syslog/%$!fromhost%/%$year%/%$month%/%$fromhost%-%$year%-%$month%-%$day%.log")

## Example action for sending to an external machine
# TODO:  Encrypted disk queues are possible but not yet set up, see http://www.rsyslog.com/encrypted-disk-queues/
# A disk or disk assisted queue is mandatory in order for queue.saveonshutdown="on" to function properly
# If action.retrycount is not set manually, it defaults to 0 (aka do not retry)
# Additionally, you can use action.execonlywhenpreviousissuspended for failover actions.  
#action(type="TODO" dynaFile="TODO" template="TODO" action.retrycount="-1" action.resumeinterval="15" queue.type="LinkedList" queue.filename="ThisNameMustBeGloballyUnique" queue.saveonshutdown="on" queue.discardseverity="7" queue.discardmark="10000" queue.highwatermark="7500" queue.size="10240" queue.maxfilesize="100m" queue.maxdiskspace="20g")

## Configure the default ruleset
ruleset(name="default") {
	# Parse the JSON
	action(type="mmjsonparse")

	if ($parsesuccess == "OK") then {
#		# This is an example of how to match using POSIX ERE word boundaries on the string "string".
#		if (re_match($!message, ["[[:<:]]string[[:>:]]"]) then {
#			stop
#		}
		if (($!fromhost contains_i ["EXAMPLE1","EXAMPLE2"]) and (($!message contains ["EXAMPLE1","EXAMPLE2"]) or ($!syslogtag contains ["EXAMPLE1","EXAMPLE2"]))) then { # TODO:  Replace the examples
			action(type="omfile" dynaFile="json_default" template="logprobe_json" dirCreateMode="0750" dirGroup="syslog_team" dirOwner="syslog" fileOwner="syslog" fileGroup="syslog_team" fileCreateMode="0640" queue.type="LinkedList" queue.filename="json_default_servicenamematch" queue.saveonshutdown="on" queue.discardseverity="7" queue.discardmark="10000" queue.highwatermark="7500" queue.size="10240" queue.maxfilesize="100m" queue.maxdiskspace="20g")		# TODO:  Replace the Owners and Groups appropriately
#			action(type="omfile" dynaFile="servicename" template="logprobe_json" dirCreateMode="0750" dirGroup="syslog_team" dirOwner="syslog" fileOwner="syslog" fileGroup="syslog_team" fileCreateMode="0640" queue.type="LinkedList" queue.filename="servicename_servicenamematch" queue.saveonshutdown="on" queue.discardseverity="7" queue.discardmark="10000" queue.highwatermark="7500" queue.size="10240" queue.maxfilesize="100m" queue.maxdiskspace="20g")					# TODO:  Replace the Owners and Groups appropriately

#			# This is an example of how to send email alerts for a subset of this conditional
#			if ($!message contains ["TODO"]) then {
#				# Set mail title
#				set $.mail!title = "TODO";
#				
#				# Set string match
#				if ($!message contains ["TODO"]) then {
#					set $.mail!stringmatch = "TODO";
#				} else if ($!message contains ["TODO"]) then {
#					set $.mail!stringmatch = "TODO";
#				}
#
#				# Set mail context
#				if ($!message contains ["TODO"]) then {
#					set $.mail!context = "TODO happened";
#				} else if ($!message contains ["TODO","TODO"]) then {
#					set $.mail!context = "TODO happened";
#				} else {
#					set $.mail!context = "Unknown context";
#				}
#
#				# Send the email. You can also add 'action.execonlyonceeveryinterval="1"' to the below action to send only the first message sent to ommail per 1 second
#				action(type="ommail" server="TODO.example.com" port="25" mailfrom="TODO@example.com" mailto="TODO@example.com" body.enable="on" template="MailBody" subject.template="MailSubject")
#			}
			
			stop # To reduce processing overhead
		} else if ($!fromhost-ip contains ["192.0.2.1","198.51.100.1"]) then { # TODO:  Replace the examples
			action(type="omfile" dynaFile="json_default" template="logprobe_json" dirCreateMode="0750" dirGroup="syslog_team" dirOwner="syslog" fileOwner="syslog" fileGroup="syslog_team" fileCreateMode="0640" queue.type="LinkedList" queue.filename="json_default_logprobematch" queue.saveonshutdown="on" queue.discardseverity="7" queue.discardmark="10000" queue.highwatermark="7500" queue.size="10240" queue.maxfilesize="100m" queue.maxdiskspace="20g")		# TODO:  Replace the Owners and Groups appropriately
			stop # To reduce processing overhead
		} else {
			action(type="omfile" dynaFile="json_default" template="logprobe_json" dirCreateMode="0750" dirGroup="syslog_team" dirOwner="syslog" fileOwner="syslog" fileGroup="syslog_team" fileCreateMode="0640" queue.type="LinkedList" queue.filename="json_default" queue.saveonshutdown="on" queue.discardseverity="7" queue.discardmark="10000" queue.highwatermark="7500" queue.size="10240" queue.maxfilesize="100m" queue.maxdiskspace="20g")				# TODO:  Replace the Owners and Groups appropriately
			stop # To reduce processing overhead
		}
	} else if ($!fromhost-ip == ["192.0.2.1","198.51.100.1","203.0.113.1"]) then { # TODO:  Replace the examples
		# Remove the garbage from known vulnerablity scanners
		stop # To reduce processing overhead
	} else if ($app-name == "rsyslogd") then {
		action(type="omfile" dynaFile="notvalidjson_local" template="RSYSLOG_FileFormat" dirCreateMode="0750" dirGroup="syslog_team" dirOwner="syslog" fileOwner="syslog" fileGroup="syslog_team" fileCreateMode="0640" queue.type="LinkedList" queue.filename="notvalidjson_local" queue.saveonshutdown="on" queue.discardseverity="7" queue.discardmark="10000" queue.highwatermark="7500" queue.size="10240" queue.maxfilesize="100m" queue.maxdiskspace="20g")			# TODO:  Replace the Owners and Groups appropriately
		stop # To reduce processing overhead
	} else {
		action(type="omfile" dynaFile="notvalidjson_default" template="RSYSLOG_FileFormat" dirCreateMode="0750" dirGroup="syslog_team" dirOwner="syslog" fileOwner="syslog" fileGroup="syslog_team" fileCreateMode="0640" queue.type="LinkedList" queue.filename="notvalidjson_default" queue.saveonshutdown="on" queue.discardseverity="7" queue.discardmark="10000" queue.highwatermark="7500" queue.size="10240" queue.maxfilesize="100m" queue.maxdiskspace="20g")		# TODO:  Replace the Owners and Groups appropriately
		stop # To reduce processing overhead
	}
}


## Configure some store-specific directives
$DefaultNetstreamDriver gtls                                                    # Use gtls
$DefaultNetstreamDriverCAFile /etc/TODO/server-chain.crt                        # TODO:  Update the example Cert Chain
$DefaultNetstreamDriverCertFile /etc/TODO/example.com.crt                       # TODO:  Update the example Public Cert
$DefaultNetstreamDriverKeyFile /etc/TODO/example.com.key                        # TODO:  Update the example Private Key
$DefaultRuleset default                                                         # If an input module doesn't specify a ruleset (including those that are loaded by default), use this one.


## Load the appropriate modules
module(load="imrelp")                                                           # Load the RELP input module
module(load="ommail")								# Load the mail output module

## Specify rulesets based on how it was received - be explicit instead of implicit
input(type="imrelp" port="1514" tls="on" tls.caCert="/home/TODO/TODO.pem" tls.myCert="/etc/TODO/TODO.pem" tls.myPrivKey="/etc/TODO/TODO.pem" tls.authMode="name" tls.permittedpeer=["aggregationserver1","aggregationserver2"] ruleset="default")     # If it comes in via TCP/1514, use the default ruleset (details in http://www.rsyslog.com/using-tls-with-relp/).  TODO:  Replace the permitted peers with the server names from the aggregation layer (the only servers which should be connecting to TCP/1514)
