# =========================
# Author:         Jon Zeolla (JZeolla)
# Creation date:  2015-02-01
# File Type:      Configuration
# Version:        1.0
# Description:    This is a rsyslog configuration file for parsing and storing JSON-formatted messages.
#
# Notes
# - This should be accompanied by a rsyslog.conf config file which sets more general settings for rsyslog.
# - Additional helpful information is available in my personal knowledge base (not public).
# - Anything that has a placeholder value is tagged with TODO.  Replace all dirGroup, dirOwner, fileOwner, and fileGroup with the correct users/groups.
# - This config file mixes rsyslog "legacy format" (pre-6.3.3) with the new format due to a lack of documentation as of 2015-02-01 (External link - http://blog.gerhards.net/2011/07/rsyslog-633-config-format-improvements.html).
# - rsyslog source is available on GitHub (External link - https://github.com/rsyslog/rsyslog).
# - rsyslog documentation is available on the rsyslog website (External link - http://www.rsyslog.com/doc/master/).
#
# =========================

## Default log templates
# TODO:  This should probably log to a database, not flat files.  This has the added benefit of being able to store characteristics like the the sensitivity status (nonsensitive, sensitive, pci, hipaa, etc.) and integrity level (udp, tcp, tcp w/tls, relp, relp w/tls, etc.) more easily.  
# Templates for syslog that successfully parses as JSON.
template(name="nonsensitive_json_default" type="string" string="/data/syslog/%$!fromhost-ip%/%$year%/%$month%/%$!fromhost-ip%-%$year%-%$month%-%$day%.log")
template(name="sensitive_json_default" type="string" string="/data/syslog/SENSITIVE-%$!fromhost-ip%/%$year%/%$month%/%$!fromhost-ip%-%$year%-%$month%-%$day%.log")
# Templates for syslog that doesn't successfully parse as JSON.
template(name="nonsensitive_notvalidjson_default" type="string" string="/data/syslog/%hostname%/%$year%/%$month%/%hostname%-%$year%-%$month%-%$day%.log")
template(name="sensitive_notvalidjson_default" type="string" string="/data/syslog/SENSITIVE-%hostname%/%$year%/%$month%/%hostname%-%$year%-%$month%-%$day%.log")
template(name="nonsensitive_notvalidjson_local" type="string" string="/data/syslog/%fromhost-ip%/%$year%/%$month%/%fromhost-ip%-%$year%-%$month%-%$day%.log")
template(name="sensitive_notvalidjson_local" type="string" string="/data/syslog/SENSITIVE-%fromhost-ip%/%$year%/%$month%/%fromhost-ip%-%$year%-%$month%-%$day%.log")


# Parse the JSON-formatted syslog and format it as RFC3164 syslog.  
template(name="logprobe_json" type="string" string="<%pri%>%$!timereported% %$!fromhost-ip% %$!syslogtag%%$!message%\n")
# TODO:  Service-specific log template.  This is a template for refined log files.  Ideas are logs of all successful authentications, failed authentications, or specific keywords or terms.  This can be handled better by storing in a database.
#template(name="servicename" type="string" string="/data/syslog/services/servicename-%$year%-%$month%-%$day%.log")
# TODO:  Log template for duplicated PTR resolutions.  This is a template to use to handle multiple IPs that reverse lookup to the same hostname, which is an issue because this config file uses the source IP for the folder structure, but there is a cron job to do reverse lookups and create sym links).  This can be handled better by storing in a database, because you could allow both source IP and host lookup fields in the same entry.
#template(name="example" type="string" string="/data/syslog/%$!fromhost%/%$year%/%$month%/%$fromhost%-%$year%-%$month%-%$day%.log")

## Example action for sending to an external machine
# TODO:  Encrypted disk queues are possible but not yet set up, see http://www.rsyslog.com/encrypted-disk-queues/
# A disk or disk assisted queue is mandatory in order for queue.saveonshutdown="on" to function properly
# If action.retryCount is not set manually, it defaults to 0 (aka do not retry)
#action(type="???" dynaFile="???" template="???" action.retryCount="-1" queue.type="LinkedList" queue.filename="ThisNameMustBeGloballyUnique" queue.saveonshutdown="on" queue.discardseverity="7" queue.discardmark="10000" queue.highwatermark="7500" queue.size="10240" queue.maxfilesize="100m" queue.maxdiskspace="20g")

## Configure the nonsensitive ruleset
ruleset(name="nonsensitive") {
	# Parse the JSON
	action(type="mmjsonparse")

	if ($parsesuccess == "OK") then {
        	if ((($!fromhost contains_i "EXAMPLE1") or ($!fromhost contains_i "EXAMPLE2")) and (($!message contains "EXAMPLE1") or ($!message contains "EXAMPLE2") or ($!syslogtag contains "EXAMPLE1") or ($!syslogtag contains "EXAMPLE2"))) then { # TODO:  Replace the examples
			          action(type="omfile" dynaFile="nonsensitive_json_default" template="logprobe_json" dirCreateModedirCreateMode="0750" dirGroup="syslog_team" dirOwner="syslog" fileOwner="syslog" fileGroup="syslog_team" fileCreateMode="0640" queue.type="LinkedList" queue.filename="nonsensitive_json_default_servicenamematch" queue.saveonshutdown="on" queue.discardseverity="7" queue.discardmark="10000" queue.highwatermark="7500" queue.size="10240" queue.maxfilesize="100m" queue.maxdiskspace="20g")
			          action(type="omfile" dynaFile="servicename" template="logprobe_json" dirCreateMode="0750" dirGroup="syslog_team" dirOwner="syslog" fileOwner="syslog" fileGroup="syslog_team" fileCreateMode="0640" queue.type="LinkedList" queue.filename="servicename_servicenamematch" queue.saveonshutdown="on" queue.discardseverity="7" queue.discardmark="10000" queue.highwatermark="7500" queue.size="10240" queue.maxfilesize="100m" queue.maxdiskspace="20g")
			          stop # To reduce processing overhead
		      } else if (($!fromhost-ip contains "128.2.104.8") or ($!fromhost-ip contains "128.2.156.35")) then {
			          action(type="omfile" dynaFile="nonsensitive_json_default" template="logprobe_json" dirCreateMode="0750" dirGroup="syslog_team" dirOwner="syslog" fileOwner="syslog" fileGroup="syslog_team" fileCreateMode="0640" queue.type="LinkedList" queue.filename="nonsensitive_json_default_logprobematch" queue.saveonshutdown="on" queue.discardseverity="7" queue.discardmark="10000" queue.highwatermark="7500" queue.size="10240" queue.maxfilesize="100m" queue.maxdiskspace="20g")
			          stop # To reduce processing overhead
		      } else {
			          action(type="omfile" dynaFile="nonsensitive_json_default" template="logprobe_json" dirCreateMode="0750" dirGroup="syslog_team" dirOwner="syslog" fileOwner="syslog" fileGroup="syslog_team" fileCreateMode="0640" queue.type="LinkedList" queue.filename="nonsensitive_json_default" queue.saveonshutdown="on" queue.discardseverity="7" queue.discardmark="10000" queue.highwatermark="7500" queue.size="10240" queue.maxfilesize="100m" queue.maxdiskspace="20g")
			          stop # To reduce processing overhead
		      }
	} else if (($!fromhost-ip == "192.0.2.1") or ($!fromhost-ip == "198.51.100.1") or ($!fromhost-ip == "203.0.113.1")) then { # TODO:  Replace the examples
                # Remove the garbage from known vulnerablity scanners
                stop # To reduce processing overhead
	} else if ($app-name == "rsyslogd") then {
		            action(type="omfile" dynaFile="nonsensitive_notvalidjson_local" template="RSYSLOG_FileFormat" dirCreateMode="0750" dirGroup="syslog_team" dirOwner="syslog" fileOwner="syslog" fileGroup="syslog_team" fileCreateMode="0640" queue.type="LinkedList" queue.filename="nonsensitive_notvalidjson_local" queue.saveonshutdown="on" queue.discardseverity="7" queue.discardmark="10000" queue.highwatermark="7500" queue.size="10240" queue.maxfilesize="100m" queue.maxdiskspace="20g")
                stop # To reduce processing overhead
	} else {
	        action(type="omfile" dynaFile="nonsensitive_notvalidjson_default" template="RSYSLOG_FileFormat" dirCreateMode="0750" dirGroup="syslog_team" dirOwner="syslog" fileOwner="syslog" fileGroup="syslog_team" fileCreateMode="0640" queue.type="LinkedList" queue.filename="nonsensitive_notvalidjson_default" queue.saveonshutdown="on" queue.discardseverity="7" queue.discardmark="10000" queue.highwatermark="7500" queue.size="10240" queue.maxfilesize="100m" queue.maxdiskspace="20g")
		      stop # To reduce processing overhead
	}
}

## Configure the sensitive ruleset
ruleset(name="sensitive") {
	action(type="mmjsonparse")
        if ($parsesuccess == "OK") then {
	             	action(type="omfile" dynaFile="sensitive_json_default" template="logprobe_json" dirCreateModedirCreateMode="0750" dirGroup="syslog_team" dirOwner="syslog" fileOwner="syslog" fileGroup="syslog_team" fileCreateMode="0640" queue.type="LinkedList" queue.filename="sensitive_json_default" queue.saveonshutdown="on" queue.discardseverity="7" queue.discardmark="10000" queue.highwatermark="7500" queue.size="10240" queue.maxfilesize="100m" queue.maxdiskspace="20g")
		            stop # To reduce processing overhead
        } else if (($!fromhost-ip == "192.0.2.1") or ($!fromhost-ip == "198.51.100.1") or ($!fromhost-ip == "203.0.113.1")) then { # TODO:  Replace the examples
		            # Remove the garbage from known vulnerablity scanners
		            stop # To reduce processing overhead
        } else if ($app-name == "rsyslogd") then {
                action(type="omfile" dynaFile="sensitive_notvalidjson_local" template="RSYSLOG_FileFormat" dirCreateMode="0750" dirGroup="syslog_team" dirOwner="syslog" fileOwner="syslog" fileGroup="syslog_team" fileCreateMode="0640" queue.type="LinkedList" queue.filename="sensitive_notvalidjson_local" queue.saveonshutdown="on" queue.discardseverity="7" queue.discardmark="10000" queue.highwatermark="7500" queue.size="10240" queue.maxfilesize="100m" queue.maxdiskspace="20g")
                stop # To reduce processing overhead
	      } else {
	            	action(type="omfile" dynaFile="sensitive_notvalidjson_default" template="RSYSLOG_FileFormat" dirCreateMode="0750" dirGroup="syslog_team" dirOwner="syslog" fileOwner="syslog" fileGroup="syslog_team" fileCreateMode="0640" queue.type="LinkedList" queue.filename="sensitive_notvalidjson_default" queue.saveonshutdown="on" queue.discardseverity="7" queue.discardmark="10000" queue.highwatermark="7500" queue.size="10240" queue.maxfilesize="100m" queue.maxdiskspace="20g")
		            stop # To reduce processing overhead
	      }
}


## Configure some store-specific directives
$DefaultNetstreamDriver gtls                                                    # Use gtls
$DefaultNetstreamDriverCAFile /etc/pki/rsyslog/certs/server-chain.crt           # TODO:  Update the example Cert Chain
$DefaultNetstreamDriverCertFile /etc/pki/rsyslog/certs/example.com.crt          # TODO:  Update the example Public Cert
$DefaultNetstreamDriverKeyFile /etc/pki/rsyslog/private/example.com.key         # TODO:  Update the example Private Key
global(preserveFQDN="on")                                                       # Preserve the FQDNs as possible
$DefaultRuleset nonsensitive                                                    # If an input module doesn't specify a ruleset (including those that are loaded by default), use this one.


## Load the appropriate modules
module(load="imrelp" StreamDriver.Mode="1" StreamDriver.AuthMode="anon")        # Load RELP over TLS


## Specify rulesets depending on how it was received
input(type="imrelp" port="514" tls="on" ruleset="nonsensitive")     # If it comes in via TCP/514, use the nonsensitive ruleset
input(type="imrelp" port="6514" tls="on" ruleset="sensitive")       # If it comes in via TCP/6514, use the sensitive ruleset
